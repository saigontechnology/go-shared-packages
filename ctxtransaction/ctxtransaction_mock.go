// Code generated by mockery v2.50.0. DO NOT EDIT.

package ctxtransaction

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionContext is an autogenerated mock type for the TransactionContext type
type MockTransactionContext struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *MockTransactionContext) Begin(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginWithConnection provides a mock function with given fields: ctx, conn
func (_m *MockTransactionContext) BeginWithConnection(ctx context.Context, conn *gorm.DB) (context.Context, error) {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for BeginWithConnection")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) (context.Context, error)); ok {
		return rf(ctx, conn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) context.Context); ok {
		r0 = rf(ctx, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB) error); ok {
		r1 = rf(ctx, conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitFromContext provides a mock function with given fields: ctx
func (_m *MockTransactionContext) CommitFromContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CommitFromContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MustHaveTransaction provides a mock function with given fields: ctx
func (_m *MockTransactionContext) MustHaveTransaction(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustHaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackFromContext provides a mock function with given fields: ctx
func (_m *MockTransactionContext) RollbackFromContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackFromContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Session provides a mock function with given fields: ctx
func (_m *MockTransactionContext) Session(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// SessionWithFallback provides a mock function with given fields: ctx, fallbackDB
func (_m *MockTransactionContext) SessionWithFallback(ctx context.Context, fallbackDB *gorm.DB) *gorm.DB {
	ret := _m.Called(ctx, fallbackDB)

	if len(ret) == 0 {
		panic("no return value specified for SessionWithFallback")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) *gorm.DB); ok {
		r0 = rf(ctx, fallbackDB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// ShouldHaveConnection provides a mock function with no fields
func (_m *MockTransactionContext) ShouldHaveConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldHaveConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTransactionContext creates a new instance of MockTransactionContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionContext {
	mock := &MockTransactionContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
